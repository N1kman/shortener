from fastapi import APIRouter, Depends, HTTPException
from fastapi_cache.decorator import cache
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from fastapi import responses

from src.auth.auth import current_active_user
from src.database.database import get_async_session
from src.models import UserOrm, UrlPairOrm
from src.url.schemas.url import UrlPairEncoded

router = APIRouter(
    prefix="/urls",
    tags=["Urls"]
)


async def get_urls(long_url: str, short_url: str | None = None):
    return {'long_url': long_url, 'short_url': short_url}


@router.post('/')
async def add_urls(urls: dict = Depends(get_urls), user: UserOrm = Depends(current_active_user), session: AsyncSession = Depends(get_async_session)):
    try:
        encoded_url = UrlPairEncoded(**urls)
        query = (
            select(UserOrm)
            .where(UserOrm.id == user.id)
            .options(selectinload(UserOrm.urls))
        )
        result = await session.execute(query)
        u: UserOrm = result.scalars().all()[0]
        u.urls.append(UrlPairOrm(short_url=encoded_url.short_url, long_url=encoded_url.long_url, user_id=user.id))
        await session.commit()
        return {
            "status": "success",
            "data": encoded_url,
            "details": 'Generated by sha256 code'
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail={
            "status": "error",
            "data": None,
            "details": str(e)
        })

@router.get('/{short_url}')
@cache(expire=60)
async def add_urls(short_url: str, user: UserOrm = Depends(current_active_user), session: AsyncSession = Depends(get_async_session)):
    try:
        query = (
            select(UserOrm)
            .where(UserOrm.id == user.id)
            .options(selectinload(UserOrm.urls))
        )
        result = await session.execute(query)
        u: UserOrm = result.scalars().all()[0]
        url = list(filter(lambda x: x.short_url == short_url, u.urls))[0].long_url
        return responses.RedirectResponse(url, status_code=302)
    except Exception as e:
        raise HTTPException(status_code=400, detail={
            "status": "error",
            "data": None,
            "details": str(e)
        })

@router.delete('/{short_url}')
async def add_urls(short_url: str, user: UserOrm = Depends(current_active_user), session: AsyncSession = Depends(get_async_session)):
    try:
        stmt = (
            delete(UrlPairOrm)
            .where(UrlPairOrm.short_url == short_url)
        )
        await session.execute(stmt)
        await session.commit()
        return {
            "status": "success",
            "data": None,
            "details": None
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail={
            "status": "error",
            "data": None,
            "details": str(e)
        })

